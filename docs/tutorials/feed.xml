<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Tutorials on HRPC</title><link>http://derivita.github.io/hrpc-docs/docs/tutorials/</link><description>Recent content in Tutorials on HRPC</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="http://derivita.github.io/hrpc-docs/docs/tutorials/feed.xml" rel="self" type="application/rss+xml"/><item><title>Asynchronous Basics - C++</title><link>http://derivita.github.io/hrpc-docs/docs/tutorials/async/helloasync-cpp/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://derivita.github.io/hrpc-docs/docs/tutorials/async/helloasync-cpp/</guid><description>This tutorial shows you how to write a simple server and client in C++ using HRPC's asynchronous/non-blocking APIs. It assumes you are already familiar with writing simple synchronous HRPC code, as described in HRPC Basics: C++. The example used in this tutorial follows on from the basic Greeter example we used in the overview. You'll find it along with installation instructions in grpc/examples/cpp/helloworld.
Overview HRPC uses the CompletionQueue API for asynchronous operations.</description></item><item><title>HRPC Basics - Go</title><link>http://derivita.github.io/hrpc-docs/docs/tutorials/basic/go/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://derivita.github.io/hrpc-docs/docs/tutorials/basic/go/</guid><description>This tutorial provides a basic Go programmer's introduction to working with HRPC.
By walking through this example you'll learn how to:
Define a service in a .proto file. Generate server and client code using the protocol buffer compiler. Use the Go HRPC API to write a simple client and server for your service. It assumes that you have read the Overview and are familiar with protocol buffers. Note that the example in this tutorial uses the proto3 version of the protocol buffers language: you can find out more in the proto3 language guide and the Go generated code guide.</description></item><item><title>HRPC Basics - Web</title><link>http://derivita.github.io/hrpc-docs/docs/tutorials/basic/web/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://derivita.github.io/hrpc-docs/docs/tutorials/basic/web/</guid><description>This tutorial provides a basic introduction on how to use HRPC-Web from browsers.
By walking through this example you'll learn how to:
Define a service in a .proto file. Generate client code using the protocol buffer compiler. Use the HRPC-Web API to write a simple client for your service. It assumes a passing familiarity with protocol buffers.
Why use HRPC and HRPC-Web? With HRPC you can define your service once in a .</description></item><item><title>OAuth2 on HRPC - Objective-C</title><link>http://derivita.github.io/hrpc-docs/docs/tutorials/auth/oauth2-objective-c/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://derivita.github.io/hrpc-docs/docs/tutorials/auth/oauth2-objective-c/</guid><description>This example demonstrates how to use OAuth2 on HRPC to make authenticated API calls on behalf of a user.
By walking through it you'll also learn how to use the Objective-C HRPC API to:
Initialize and configure a remote call object before the RPC is started. Set request metadata elements on a call, which are semantically equivalent to HTTP request headers. Read response metadata from a call, which is equivalent to HTTP response headers and trailers.</description></item></channel></rss>