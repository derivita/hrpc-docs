<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Guides on HRPC</title><link>http://hrpc.derivita.team/docs/guides/</link><description>Recent content in Guides on HRPC</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="http://hrpc.derivita.team/docs/guides/feed.xml" rel="self" type="application/rss+xml"/><item><title>Authentication</title><link>http://hrpc.derivita.team/docs/guides/auth/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://hrpc.derivita.team/docs/guides/auth/</guid><description>Overview HRPC is designed to work with a variety of authentication mechanisms, making it easy to safely use HRPC to talk to other systems. You can use our supported mechanisms - SSL/TLS with or without Google token-based authentication - or you can plug in your own authentication system by extending our provided code.
HRPC also provides a simple authentication API that lets you provide all the necessary authentication information as Credentials when creating a channel or making a call.</description></item><item><title>Error Handling</title><link>http://hrpc.derivita.team/docs/guides/error/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://hrpc.derivita.team/docs/guides/error/</guid><description>Standard error model As you'll have seen in our concepts document and examples, when a HRPC call completes successfully the server returns an OK status to the client (depending on the language the OK status may or may not be directly used in your code). But what happens if the call isn't successful?
If an error occurs, HRPC returns one of its error status codes instead, with an optional string error message that provides further details about what happened.</description></item><item><title>HRPC Concepts</title><link>http://hrpc.derivita.team/docs/guides/concepts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://hrpc.derivita.team/docs/guides/concepts/</guid><description>It assumes that you've read What is HRPC?. For language-specific details, see the Quick Start, tutorial, and reference documentation for your chosen language(s), where available (complete reference docs are coming soon).
Overview Service definition Like many RPC systems, HRPC is based around the idea of defining a service, specifying the methods that can be called remotely with their parameters and return types. By default, HRPC uses protocol buffers as the Interface Definition Language (IDL) for describing both the service interface and the structure of the payload messages.</description></item></channel></rss>